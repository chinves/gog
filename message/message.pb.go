// Code generated by protoc-gen-gogo.
// source: message.proto
// DO NOT EDIT!

/*
	Package message is a generated protocol buffer package.

	It is generated from these files:
		message.proto

	It has these top-level messages:
		UserMessage
		Join
		Neighbor
		NeighborReply
		ForwardJoin
		Disconnect
		Shuffle
		ShuffleReply
*/
package message

import proto "code.google.com/p/gogoprotobuf/proto"
import json "encoding/json"
import math "math"

// discarding unused import gogoproto "code.google.com/p/gogoprotobuf/gogoproto/gogo.pb"

import io "io"
import code_google_com_p_gogoprotobuf_proto "code.google.com/p/gogoprotobuf/proto"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import fmt1 "fmt"
import strings1 "strings"
import code_google_com_p_gogoprotobuf_proto1 "code.google.com/p/gogoprotobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect1 "reflect"

import fmt2 "fmt"
import bytes "bytes"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type Neighbor_Priority int32

const (
	Neighbor_Low  Neighbor_Priority = 0
	Neighbor_High Neighbor_Priority = 1
)

var Neighbor_Priority_name = map[int32]string{
	0: "Low",
	1: "High",
}
var Neighbor_Priority_value = map[string]int32{
	"Low":  0,
	"High": 1,
}

func (x Neighbor_Priority) Enum() *Neighbor_Priority {
	p := new(Neighbor_Priority)
	*p = x
	return p
}
func (x Neighbor_Priority) String() string {
	return proto.EnumName(Neighbor_Priority_name, int32(x))
}
func (x *Neighbor_Priority) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Neighbor_Priority_value, data, "Neighbor_Priority")
	if err != nil {
		return err
	}
	*x = Neighbor_Priority(value)
	return nil
}

// User defined messages.
type UserMessage struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Payload          []byte  `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
	Ts               *int64  `protobuf:"varint,3,req,name=ts" json:"ts,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserMessage) Reset()      { *m = UserMessage{} }
func (*UserMessage) ProtoMessage() {}

func (m *UserMessage) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *UserMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UserMessage) GetTs() int64 {
	if m != nil && m.Ts != nil {
		return *m.Ts
	}
	return 0
}

// The Join request.
type Join struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Addr             *string `protobuf:"bytes,2,req,name=addr" json:"addr,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Join) Reset()      { *m = Join{} }
func (*Join) ProtoMessage() {}

func (m *Join) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Join) GetAddr() string {
	if m != nil && m.Addr != nil {
		return *m.Addr
	}
	return ""
}

// The Neighbor request.
type Neighbor struct {
	Id               *string            `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Addr             *string            `protobuf:"bytes,2,req,name=addr" json:"addr,omitempty"`
	Priority         *Neighbor_Priority `protobuf:"varint,3,req,name=priority,enum=message.Neighbor_Priority" json:"priority,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *Neighbor) Reset()      { *m = Neighbor{} }
func (*Neighbor) ProtoMessage() {}

func (m *Neighbor) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Neighbor) GetAddr() string {
	if m != nil && m.Addr != nil {
		return *m.Addr
	}
	return ""
}

func (m *Neighbor) GetPriority() Neighbor_Priority {
	if m != nil && m.Priority != nil {
		return *m.Priority
	}
	return Neighbor_Low
}

// The reply to Neighbor request.
type NeighborReply struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Accept           *bool   `protobuf:"varint,2,req,name=accept" json:"accept,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NeighborReply) Reset()      { *m = NeighborReply{} }
func (*NeighborReply) ProtoMessage() {}

func (m *NeighborReply) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *NeighborReply) GetAccept() bool {
	if m != nil && m.Accept != nil {
		return *m.Accept
	}
	return false
}

// The ForwardJoin request.
type ForwardJoin struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	SourceId         *string `protobuf:"bytes,2,req,name=sourceId" json:"sourceId,omitempty"`
	SourceAddr       *string `protobuf:"bytes,3,req,name=sourceAddr" json:"sourceAddr,omitempty"`
	Ttl              *uint32 `protobuf:"varint,4,req,name=ttl" json:"ttl,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ForwardJoin) Reset()      { *m = ForwardJoin{} }
func (*ForwardJoin) ProtoMessage() {}

func (m *ForwardJoin) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ForwardJoin) GetSourceId() string {
	if m != nil && m.SourceId != nil {
		return *m.SourceId
	}
	return ""
}

func (m *ForwardJoin) GetSourceAddr() string {
	if m != nil && m.SourceAddr != nil {
		return *m.SourceAddr
	}
	return ""
}

func (m *ForwardJoin) GetTtl() uint32 {
	if m != nil && m.Ttl != nil {
		return *m.Ttl
	}
	return 0
}

// The Disconnect request.
type Disconnect struct {
	Id               *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Disconnect) Reset()      { *m = Disconnect{} }
func (*Disconnect) ProtoMessage() {}

func (m *Disconnect) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

// The Shuffle request.
type Shuffle struct {
	Id               *string  `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Candidates       []string `protobuf:"bytes,2,rep,name=candidates" json:"candidates,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Shuffle) Reset()      { *m = Shuffle{} }
func (*Shuffle) ProtoMessage() {}

func (m *Shuffle) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Shuffle) GetCandidates() []string {
	if m != nil {
		return m.Candidates
	}
	return nil
}

// The ShuffleReply.
type ShuffleReply struct {
	Id               *string  `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Candidates       []string `protobuf:"bytes,2,rep,name=candidates" json:"candidates,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ShuffleReply) Reset()      { *m = ShuffleReply{} }
func (*ShuffleReply) ProtoMessage() {}

func (m *ShuffleReply) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *ShuffleReply) GetCandidates() []string {
	if m != nil {
		return m.Candidates
	}
	return nil
}

func init() {
	proto.RegisterEnum("message.Neighbor_Priority", Neighbor_Priority_name, Neighbor_Priority_value)
}
func (m *UserMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Id = &s
			index = postIndex
		case 2:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload, data[index:postIndex]...)
			index = postIndex
		case 3:
			if wireType != 0 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ts = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Join) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Id = &s
			index = postIndex
		case 2:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Addr = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Neighbor) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Id = &s
			index = postIndex
		case 2:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Addr = &s
			index = postIndex
		case 3:
			if wireType != 0 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var v Neighbor_Priority
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (Neighbor_Priority(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Priority = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *NeighborReply) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Id = &s
			index = postIndex
		case 2:
			if wireType != 0 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Accept = &b
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *ForwardJoin) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Id = &s
			index = postIndex
		case 2:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.SourceId = &s
			index = postIndex
		case 3:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.SourceAddr = &s
			index = postIndex
		case 4:
			if wireType != 0 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ttl = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Disconnect) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Id = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Shuffle) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Id = &s
			index = postIndex
		case 2:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidates = append(m.Candidates, string(data[index:postIndex]))
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *ShuffleReply) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Id = &s
			index = postIndex
		case 2:
			if wireType != 2 {
				return code_google_com_p_gogoprotobuf_proto.ErrWrongType
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidates = append(m.Candidates, string(data[index:postIndex]))
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := code_google_com_p_gogoprotobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (this *UserMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserMessage{`,
		`Id:` + valueToStringMessage(this.Id) + `,`,
		`Payload:` + valueToStringMessage(this.Payload) + `,`,
		`Ts:` + valueToStringMessage(this.Ts) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Join) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Join{`,
		`Id:` + valueToStringMessage(this.Id) + `,`,
		`Addr:` + valueToStringMessage(this.Addr) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Neighbor) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Neighbor{`,
		`Id:` + valueToStringMessage(this.Id) + `,`,
		`Addr:` + valueToStringMessage(this.Addr) + `,`,
		`Priority:` + valueToStringMessage(this.Priority) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NeighborReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NeighborReply{`,
		`Id:` + valueToStringMessage(this.Id) + `,`,
		`Accept:` + valueToStringMessage(this.Accept) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardJoin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardJoin{`,
		`Id:` + valueToStringMessage(this.Id) + `,`,
		`SourceId:` + valueToStringMessage(this.SourceId) + `,`,
		`SourceAddr:` + valueToStringMessage(this.SourceAddr) + `,`,
		`Ttl:` + valueToStringMessage(this.Ttl) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Disconnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Disconnect{`,
		`Id:` + valueToStringMessage(this.Id) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Shuffle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Shuffle{`,
		`Id:` + valueToStringMessage(this.Id) + `,`,
		`Candidates:` + fmt.Sprintf("%v", this.Candidates) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShuffleReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShuffleReply{`,
		`Id:` + valueToStringMessage(this.Id) + `,`,
		`Candidates:` + fmt.Sprintf("%v", this.Candidates) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserMessage) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Payload != nil {
		l = len(m.Payload)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Ts != nil {
		n += 1 + sovMessage(uint64(*m.Ts))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *Join) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Addr != nil {
		l = len(*m.Addr)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *Neighbor) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Addr != nil {
		l = len(*m.Addr)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Priority != nil {
		n += 1 + sovMessage(uint64(*m.Priority))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *NeighborReply) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Accept != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *ForwardJoin) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SourceId != nil {
		l = len(*m.SourceId)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SourceAddr != nil {
		l = len(*m.SourceAddr)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Ttl != nil {
		n += 1 + sovMessage(uint64(*m.Ttl))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *Disconnect) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *Shuffle) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Candidates) > 0 {
		for _, s := range m.Candidates {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}
func (m *ShuffleReply) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Candidates) > 0 {
		for _, s := range m.Candidates {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func NewPopulatedUserMessage(r randyMessage, easy bool) *UserMessage {
	this := &UserMessage{}
	v1 := randStringMessage(r)
	this.Id = &v1
	if r.Intn(10) != 0 {
		v2 := r.Intn(100)
		this.Payload = make([]byte, v2)
		for i := 0; i < v2; i++ {
			this.Payload[i] = byte(r.Intn(256))
		}
	}
	v3 := r.Int63()
	if r.Intn(2) == 0 {
		v3 *= -1
	}
	this.Ts = &v3
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 4)
	}
	return this
}

func NewPopulatedJoin(r randyMessage, easy bool) *Join {
	this := &Join{}
	v4 := randStringMessage(r)
	this.Id = &v4
	v5 := randStringMessage(r)
	this.Addr = &v5
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 3)
	}
	return this
}

func NewPopulatedNeighbor(r randyMessage, easy bool) *Neighbor {
	this := &Neighbor{}
	v6 := randStringMessage(r)
	this.Id = &v6
	v7 := randStringMessage(r)
	this.Addr = &v7
	v8 := Neighbor_Priority([]int32{0, 1}[r.Intn(2)])
	this.Priority = &v8
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 4)
	}
	return this
}

func NewPopulatedNeighborReply(r randyMessage, easy bool) *NeighborReply {
	this := &NeighborReply{}
	v9 := randStringMessage(r)
	this.Id = &v9
	v10 := bool(r.Intn(2) == 0)
	this.Accept = &v10
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 3)
	}
	return this
}

func NewPopulatedForwardJoin(r randyMessage, easy bool) *ForwardJoin {
	this := &ForwardJoin{}
	v11 := randStringMessage(r)
	this.Id = &v11
	v12 := randStringMessage(r)
	this.SourceId = &v12
	v13 := randStringMessage(r)
	this.SourceAddr = &v13
	v14 := r.Uint32()
	this.Ttl = &v14
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 5)
	}
	return this
}

func NewPopulatedDisconnect(r randyMessage, easy bool) *Disconnect {
	this := &Disconnect{}
	v15 := randStringMessage(r)
	this.Id = &v15
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 2)
	}
	return this
}

func NewPopulatedShuffle(r randyMessage, easy bool) *Shuffle {
	this := &Shuffle{}
	v16 := randStringMessage(r)
	this.Id = &v16
	if r.Intn(10) != 0 {
		v17 := r.Intn(10)
		this.Candidates = make([]string, v17)
		for i := 0; i < v17; i++ {
			this.Candidates[i] = randStringMessage(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 3)
	}
	return this
}

func NewPopulatedShuffleReply(r randyMessage, easy bool) *ShuffleReply {
	this := &ShuffleReply{}
	v18 := randStringMessage(r)
	this.Id = &v18
	if r.Intn(10) != 0 {
		v19 := r.Intn(10)
		this.Candidates = make([]string, v19)
		for i := 0; i < v19; i++ {
			this.Candidates[i] = randStringMessage(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 3)
	}
	return this
}

type randyMessage interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMessage(r randyMessage) rune {
	res := rune(r.Uint32() % 1112064)
	if 55296 <= res {
		res += 2047
	}
	return res
}
func randStringMessage(r randyMessage) string {
	v20 := r.Intn(100)
	tmps := make([]rune, v20)
	for i := 0; i < v20; i++ {
		tmps[i] = randUTF8RuneMessage(r)
	}
	return string(tmps)
}
func randUnrecognizedMessage(r randyMessage, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldMessage(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldMessage(data []byte, r randyMessage, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateMessage(data, uint64(key))
		v21 := r.Int63()
		if r.Intn(2) == 0 {
			v21 *= -1
		}
		data = encodeVarintPopulateMessage(data, uint64(v21))
	case 1:
		data = encodeVarintPopulateMessage(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateMessage(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateMessage(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateMessage(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateMessage(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *UserMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UserMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessage(data, i, uint64(len(*m.Id)))
		i += copy(data[i:], *m.Id)
	}
	if m.Payload != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMessage(data, i, uint64(len(m.Payload)))
		i += copy(data[i:], m.Payload)
	}
	if m.Ts != nil {
		data[i] = 0x18
		i++
		i = encodeVarintMessage(data, i, uint64(*m.Ts))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *Join) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Join) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessage(data, i, uint64(len(*m.Id)))
		i += copy(data[i:], *m.Id)
	}
	if m.Addr != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMessage(data, i, uint64(len(*m.Addr)))
		i += copy(data[i:], *m.Addr)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *Neighbor) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Neighbor) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessage(data, i, uint64(len(*m.Id)))
		i += copy(data[i:], *m.Id)
	}
	if m.Addr != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMessage(data, i, uint64(len(*m.Addr)))
		i += copy(data[i:], *m.Addr)
	}
	if m.Priority != nil {
		data[i] = 0x18
		i++
		i = encodeVarintMessage(data, i, uint64(*m.Priority))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *NeighborReply) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NeighborReply) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessage(data, i, uint64(len(*m.Id)))
		i += copy(data[i:], *m.Id)
	}
	if m.Accept != nil {
		data[i] = 0x10
		i++
		if *m.Accept {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *ForwardJoin) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ForwardJoin) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessage(data, i, uint64(len(*m.Id)))
		i += copy(data[i:], *m.Id)
	}
	if m.SourceId != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMessage(data, i, uint64(len(*m.SourceId)))
		i += copy(data[i:], *m.SourceId)
	}
	if m.SourceAddr != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintMessage(data, i, uint64(len(*m.SourceAddr)))
		i += copy(data[i:], *m.SourceAddr)
	}
	if m.Ttl != nil {
		data[i] = 0x20
		i++
		i = encodeVarintMessage(data, i, uint64(*m.Ttl))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *Disconnect) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Disconnect) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessage(data, i, uint64(len(*m.Id)))
		i += copy(data[i:], *m.Id)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *Shuffle) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Shuffle) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessage(data, i, uint64(len(*m.Id)))
		i += copy(data[i:], *m.Id)
	}
	if len(m.Candidates) > 0 {
		for _, s := range m.Candidates {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func (m *ShuffleReply) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ShuffleReply) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessage(data, i, uint64(len(*m.Id)))
		i += copy(data[i:], *m.Id)
	}
	if len(m.Candidates) > 0 {
		for _, s := range m.Candidates {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}
func encodeFixed64Message(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Message(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMessage(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (this *UserMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&message.UserMessage{` + `Id:` + valueToGoStringMessage(this.Id, "string"), `Payload:` + valueToGoStringMessage(this.Payload, "byte"), `Ts:` + valueToGoStringMessage(this.Ts, "int64"), `XXX_unrecognized:` + fmt1.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Join) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&message.Join{` + `Id:` + valueToGoStringMessage(this.Id, "string"), `Addr:` + valueToGoStringMessage(this.Addr, "string"), `XXX_unrecognized:` + fmt1.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Neighbor) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&message.Neighbor{` + `Id:` + valueToGoStringMessage(this.Id, "string"), `Addr:` + valueToGoStringMessage(this.Addr, "string"), `Priority:` + valueToGoStringMessage(this.Priority, "message.Neighbor_Priority"), `XXX_unrecognized:` + fmt1.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *NeighborReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&message.NeighborReply{` + `Id:` + valueToGoStringMessage(this.Id, "string"), `Accept:` + valueToGoStringMessage(this.Accept, "bool"), `XXX_unrecognized:` + fmt1.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *ForwardJoin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&message.ForwardJoin{` + `Id:` + valueToGoStringMessage(this.Id, "string"), `SourceId:` + valueToGoStringMessage(this.SourceId, "string"), `SourceAddr:` + valueToGoStringMessage(this.SourceAddr, "string"), `Ttl:` + valueToGoStringMessage(this.Ttl, "uint32"), `XXX_unrecognized:` + fmt1.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Disconnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&message.Disconnect{` + `Id:` + valueToGoStringMessage(this.Id, "string"), `XXX_unrecognized:` + fmt1.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Shuffle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&message.Shuffle{` + `Id:` + valueToGoStringMessage(this.Id, "string"), `Candidates:` + fmt1.Sprintf("%#v", this.Candidates), `XXX_unrecognized:` + fmt1.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *ShuffleReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&message.ShuffleReply{` + `Id:` + valueToGoStringMessage(this.Id, "string"), `Candidates:` + fmt1.Sprintf("%#v", this.Candidates), `XXX_unrecognized:` + fmt1.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect1.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect1.Indirect(rv).Interface()
	return fmt1.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringMessage(e map[int32]code_google_com_p_gogoprotobuf_proto1.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings1.Join(ss, ",") + "}"
	return s
}
func (this *UserMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UserMessage)
	if !ok {
		return fmt2.Errorf("that is not of type *UserMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that is type *UserMessage but is nil && this != nil")
	} else if this == nil {
		return fmt2.Errorf("that is type *UserMessagebut is not nil && this == nil")
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return fmt2.Errorf("Id this(%v) Not Equal that(%v)", *this.Id, *that1.Id)
		}
	} else if this.Id != nil {
		return fmt2.Errorf("this.Id == nil && that.Id != nil")
	} else if that1.Id != nil {
		return fmt2.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return fmt2.Errorf("Payload this(%v) Not Equal that(%v)", this.Payload, that1.Payload)
	}
	if this.Ts != nil && that1.Ts != nil {
		if *this.Ts != *that1.Ts {
			return fmt2.Errorf("Ts this(%v) Not Equal that(%v)", *this.Ts, *that1.Ts)
		}
	} else if this.Ts != nil {
		return fmt2.Errorf("this.Ts == nil && that.Ts != nil")
	} else if that1.Ts != nil {
		return fmt2.Errorf("Ts this(%v) Not Equal that(%v)", this.Ts, that1.Ts)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt2.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UserMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UserMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return false
		}
	} else if this.Id != nil {
		return false
	} else if that1.Id != nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if this.Ts != nil && that1.Ts != nil {
		if *this.Ts != *that1.Ts {
			return false
		}
	} else if this.Ts != nil {
		return false
	} else if that1.Ts != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Join) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Join)
	if !ok {
		return fmt2.Errorf("that is not of type *Join")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that is type *Join but is nil && this != nil")
	} else if this == nil {
		return fmt2.Errorf("that is type *Joinbut is not nil && this == nil")
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return fmt2.Errorf("Id this(%v) Not Equal that(%v)", *this.Id, *that1.Id)
		}
	} else if this.Id != nil {
		return fmt2.Errorf("this.Id == nil && that.Id != nil")
	} else if that1.Id != nil {
		return fmt2.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Addr != nil && that1.Addr != nil {
		if *this.Addr != *that1.Addr {
			return fmt2.Errorf("Addr this(%v) Not Equal that(%v)", *this.Addr, *that1.Addr)
		}
	} else if this.Addr != nil {
		return fmt2.Errorf("this.Addr == nil && that.Addr != nil")
	} else if that1.Addr != nil {
		return fmt2.Errorf("Addr this(%v) Not Equal that(%v)", this.Addr, that1.Addr)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt2.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Join) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Join)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return false
		}
	} else if this.Id != nil {
		return false
	} else if that1.Id != nil {
		return false
	}
	if this.Addr != nil && that1.Addr != nil {
		if *this.Addr != *that1.Addr {
			return false
		}
	} else if this.Addr != nil {
		return false
	} else if that1.Addr != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Neighbor) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Neighbor)
	if !ok {
		return fmt2.Errorf("that is not of type *Neighbor")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that is type *Neighbor but is nil && this != nil")
	} else if this == nil {
		return fmt2.Errorf("that is type *Neighborbut is not nil && this == nil")
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return fmt2.Errorf("Id this(%v) Not Equal that(%v)", *this.Id, *that1.Id)
		}
	} else if this.Id != nil {
		return fmt2.Errorf("this.Id == nil && that.Id != nil")
	} else if that1.Id != nil {
		return fmt2.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Addr != nil && that1.Addr != nil {
		if *this.Addr != *that1.Addr {
			return fmt2.Errorf("Addr this(%v) Not Equal that(%v)", *this.Addr, *that1.Addr)
		}
	} else if this.Addr != nil {
		return fmt2.Errorf("this.Addr == nil && that.Addr != nil")
	} else if that1.Addr != nil {
		return fmt2.Errorf("Addr this(%v) Not Equal that(%v)", this.Addr, that1.Addr)
	}
	if this.Priority != nil && that1.Priority != nil {
		if *this.Priority != *that1.Priority {
			return fmt2.Errorf("Priority this(%v) Not Equal that(%v)", *this.Priority, *that1.Priority)
		}
	} else if this.Priority != nil {
		return fmt2.Errorf("this.Priority == nil && that.Priority != nil")
	} else if that1.Priority != nil {
		return fmt2.Errorf("Priority this(%v) Not Equal that(%v)", this.Priority, that1.Priority)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt2.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Neighbor) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Neighbor)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return false
		}
	} else if this.Id != nil {
		return false
	} else if that1.Id != nil {
		return false
	}
	if this.Addr != nil && that1.Addr != nil {
		if *this.Addr != *that1.Addr {
			return false
		}
	} else if this.Addr != nil {
		return false
	} else if that1.Addr != nil {
		return false
	}
	if this.Priority != nil && that1.Priority != nil {
		if *this.Priority != *that1.Priority {
			return false
		}
	} else if this.Priority != nil {
		return false
	} else if that1.Priority != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *NeighborReply) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NeighborReply)
	if !ok {
		return fmt2.Errorf("that is not of type *NeighborReply")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that is type *NeighborReply but is nil && this != nil")
	} else if this == nil {
		return fmt2.Errorf("that is type *NeighborReplybut is not nil && this == nil")
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return fmt2.Errorf("Id this(%v) Not Equal that(%v)", *this.Id, *that1.Id)
		}
	} else if this.Id != nil {
		return fmt2.Errorf("this.Id == nil && that.Id != nil")
	} else if that1.Id != nil {
		return fmt2.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Accept != nil && that1.Accept != nil {
		if *this.Accept != *that1.Accept {
			return fmt2.Errorf("Accept this(%v) Not Equal that(%v)", *this.Accept, *that1.Accept)
		}
	} else if this.Accept != nil {
		return fmt2.Errorf("this.Accept == nil && that.Accept != nil")
	} else if that1.Accept != nil {
		return fmt2.Errorf("Accept this(%v) Not Equal that(%v)", this.Accept, that1.Accept)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt2.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *NeighborReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NeighborReply)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return false
		}
	} else if this.Id != nil {
		return false
	} else if that1.Id != nil {
		return false
	}
	if this.Accept != nil && that1.Accept != nil {
		if *this.Accept != *that1.Accept {
			return false
		}
	} else if this.Accept != nil {
		return false
	} else if that1.Accept != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ForwardJoin) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ForwardJoin)
	if !ok {
		return fmt2.Errorf("that is not of type *ForwardJoin")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that is type *ForwardJoin but is nil && this != nil")
	} else if this == nil {
		return fmt2.Errorf("that is type *ForwardJoinbut is not nil && this == nil")
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return fmt2.Errorf("Id this(%v) Not Equal that(%v)", *this.Id, *that1.Id)
		}
	} else if this.Id != nil {
		return fmt2.Errorf("this.Id == nil && that.Id != nil")
	} else if that1.Id != nil {
		return fmt2.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.SourceId != nil && that1.SourceId != nil {
		if *this.SourceId != *that1.SourceId {
			return fmt2.Errorf("SourceId this(%v) Not Equal that(%v)", *this.SourceId, *that1.SourceId)
		}
	} else if this.SourceId != nil {
		return fmt2.Errorf("this.SourceId == nil && that.SourceId != nil")
	} else if that1.SourceId != nil {
		return fmt2.Errorf("SourceId this(%v) Not Equal that(%v)", this.SourceId, that1.SourceId)
	}
	if this.SourceAddr != nil && that1.SourceAddr != nil {
		if *this.SourceAddr != *that1.SourceAddr {
			return fmt2.Errorf("SourceAddr this(%v) Not Equal that(%v)", *this.SourceAddr, *that1.SourceAddr)
		}
	} else if this.SourceAddr != nil {
		return fmt2.Errorf("this.SourceAddr == nil && that.SourceAddr != nil")
	} else if that1.SourceAddr != nil {
		return fmt2.Errorf("SourceAddr this(%v) Not Equal that(%v)", this.SourceAddr, that1.SourceAddr)
	}
	if this.Ttl != nil && that1.Ttl != nil {
		if *this.Ttl != *that1.Ttl {
			return fmt2.Errorf("Ttl this(%v) Not Equal that(%v)", *this.Ttl, *that1.Ttl)
		}
	} else if this.Ttl != nil {
		return fmt2.Errorf("this.Ttl == nil && that.Ttl != nil")
	} else if that1.Ttl != nil {
		return fmt2.Errorf("Ttl this(%v) Not Equal that(%v)", this.Ttl, that1.Ttl)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt2.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ForwardJoin) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ForwardJoin)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return false
		}
	} else if this.Id != nil {
		return false
	} else if that1.Id != nil {
		return false
	}
	if this.SourceId != nil && that1.SourceId != nil {
		if *this.SourceId != *that1.SourceId {
			return false
		}
	} else if this.SourceId != nil {
		return false
	} else if that1.SourceId != nil {
		return false
	}
	if this.SourceAddr != nil && that1.SourceAddr != nil {
		if *this.SourceAddr != *that1.SourceAddr {
			return false
		}
	} else if this.SourceAddr != nil {
		return false
	} else if that1.SourceAddr != nil {
		return false
	}
	if this.Ttl != nil && that1.Ttl != nil {
		if *this.Ttl != *that1.Ttl {
			return false
		}
	} else if this.Ttl != nil {
		return false
	} else if that1.Ttl != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Disconnect) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Disconnect)
	if !ok {
		return fmt2.Errorf("that is not of type *Disconnect")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that is type *Disconnect but is nil && this != nil")
	} else if this == nil {
		return fmt2.Errorf("that is type *Disconnectbut is not nil && this == nil")
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return fmt2.Errorf("Id this(%v) Not Equal that(%v)", *this.Id, *that1.Id)
		}
	} else if this.Id != nil {
		return fmt2.Errorf("this.Id == nil && that.Id != nil")
	} else if that1.Id != nil {
		return fmt2.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt2.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Disconnect) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Disconnect)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return false
		}
	} else if this.Id != nil {
		return false
	} else if that1.Id != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Shuffle) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Shuffle)
	if !ok {
		return fmt2.Errorf("that is not of type *Shuffle")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that is type *Shuffle but is nil && this != nil")
	} else if this == nil {
		return fmt2.Errorf("that is type *Shufflebut is not nil && this == nil")
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return fmt2.Errorf("Id this(%v) Not Equal that(%v)", *this.Id, *that1.Id)
		}
	} else if this.Id != nil {
		return fmt2.Errorf("this.Id == nil && that.Id != nil")
	} else if that1.Id != nil {
		return fmt2.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if len(this.Candidates) != len(that1.Candidates) {
		return fmt2.Errorf("Candidates this(%v) Not Equal that(%v)", len(this.Candidates), len(that1.Candidates))
	}
	for i := range this.Candidates {
		if this.Candidates[i] != that1.Candidates[i] {
			return fmt2.Errorf("Candidates this[%v](%v) Not Equal that[%v](%v)", i, this.Candidates[i], i, that1.Candidates[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt2.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Shuffle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Shuffle)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return false
		}
	} else if this.Id != nil {
		return false
	} else if that1.Id != nil {
		return false
	}
	if len(this.Candidates) != len(that1.Candidates) {
		return false
	}
	for i := range this.Candidates {
		if this.Candidates[i] != that1.Candidates[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ShuffleReply) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ShuffleReply)
	if !ok {
		return fmt2.Errorf("that is not of type *ShuffleReply")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt2.Errorf("that is type *ShuffleReply but is nil && this != nil")
	} else if this == nil {
		return fmt2.Errorf("that is type *ShuffleReplybut is not nil && this == nil")
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return fmt2.Errorf("Id this(%v) Not Equal that(%v)", *this.Id, *that1.Id)
		}
	} else if this.Id != nil {
		return fmt2.Errorf("this.Id == nil && that.Id != nil")
	} else if that1.Id != nil {
		return fmt2.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if len(this.Candidates) != len(that1.Candidates) {
		return fmt2.Errorf("Candidates this(%v) Not Equal that(%v)", len(this.Candidates), len(that1.Candidates))
	}
	for i := range this.Candidates {
		if this.Candidates[i] != that1.Candidates[i] {
			return fmt2.Errorf("Candidates this[%v](%v) Not Equal that[%v](%v)", i, this.Candidates[i], i, that1.Candidates[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt2.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ShuffleReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ShuffleReply)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != nil && that1.Id != nil {
		if *this.Id != *that1.Id {
			return false
		}
	} else if this.Id != nil {
		return false
	} else if that1.Id != nil {
		return false
	}
	if len(this.Candidates) != len(that1.Candidates) {
		return false
	}
	for i := range this.Candidates {
		if this.Candidates[i] != that1.Candidates[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
